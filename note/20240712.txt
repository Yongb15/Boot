product 조회
select하면 product 테이블에서 조회가 가능
하나의 행들이 productVO객체
그 후 조회된 행들을 arrayList<>로 묶어야한다 그걸 mapper로 돌려줌

추가되는 과정
/register -> product-insert -> Controller -> Mapper -> xml -> Mapper -> Controller -> productMapper.insert(productVO);로 돌아오고 return new RedirectView("list"); 실행 

조회되는 과정
-> /list -> Controller -> Mapper -> xml -> Mapper -> Controller -> product-list.html

3-tier(3계층) - mvc 패턴의 
- 표현 계층, 비즈니스 게층, 영속 계층을 각각 물리적으로 독립된 모듈로 개발하고 유지하는 구조를 말한다.
- 스프링 프로젝트는 3-tier 방식으로 구성한다.

계층의 구조
Presentation tier - 표현 계층
- 화면에 보여주는 기술을 사용하는 영역
- Controller에서 사용자의 요청에 맞는 응답처리를 진행한다.
- HTML 엔진(Thymeleaf), HTML 등이 담당하는 영역이다.
- 화면 구성이 이에 속한다.

Business tier - 비즈니스 계층
- 순수한 비즈니스 로직을 담고있는 영역이다.
- 표현 계층과 영속 계층의 다리 역할을 한다.
- 고객이 원하는 요구사항을 반영하는 계층이다.
- 서비스에 있어서 가장 중요한 영역이다.

Presistence tier - 영속 계층
- 데이터를 어떤 방식으롭 보관하고 사용하는 가에 대한 설계가 들어가는 계층
- 일반적으로 DBMS를 많이 사용한다.

각 영역은 독립적으로 설계되어 나중에 특정한 기술이 변하더라도 전자제품의 부품처럼 쉽게 교환할 수 있게 하자는 방식이다.
각 연결부위는 인터페이스를 이용해서 설꼐하는 것이 일반적인 구성방식이다.

3-TIER VS MVC
디자인 패턴
- 물리적으로 구분할 수 없는 설계를 문서화 하면서 고안된 방법
- 프로그램의 규모가 커질수록 다양한 문제를 겪게 되는데 이 문제들을 효율적으로 해결할 수 있게 유형별로 패턴화 한 것

3-TIER
- '물리적으로 독립된 모듈'로 개발하고 유지하는 구조
- 각 계층은 접촉 계층과의 통신만 하면 된다. 무조건 비즈니스 계층을 통해야 한다.

MVC 패턴
- 물리적으로 구분할 수 없다.

view -> controller -> mapper 에서

view -< controller -< sevice -> dao -> mapper